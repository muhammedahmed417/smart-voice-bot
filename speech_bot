import speech_recognition as sr
import pyttsx3 
import wikipedia
import string

engine = pyttsx3.init()
engine.setProperty('rate', 125)
engine.setProperty('volume', 1.0)


def clean_text(text):
    text = text.translate(str.maketrans('', '', string.punctuation))
    return text

def speak(text):
    print("üó£Ô∏è Speaking:", text)
    cleaned = clean_text(text)
    engine.say(cleaned)
    engine.runAndWait()

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("üé§ Please speak in English...")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio, language="en-US")
        print("‚úÖ You said:", text)
        return text.lower()
    except sr.UnknownValueError:
        print("‚ùå Could not understand.")
        return None
    except sr.RequestError:
        print("‚ùå Internet connection problem.")
        return None


hyperglide_knowledge = {
    "what is the size and capacity of hyperglide": 
    "Hey there, Earthling! HyperGlide is designed to provide a spacious and comfortable living environment. While specific dimensions aren't outlined, it includes private rooms enhanced with essential facilities to accommodate the crew‚Äôs comfort and well-being. HyperGlide can host up to 100 people at a time, offering enough room for scientific collaboration, recreational activities, and social bonding. üåü",

    "how is waste managed for 100 people": 
    "Great question, Earthling! Waste management on HyperGlide involves waste collection and segregation, advanced recycling systems, water treatment for reuse, space debris management, and ensuring user satisfaction and cleanliness. üåå‚ú®",

    "what specific recycling technologies are used on hyperglide": 
    "Sure thing, Earthling! HyperGlide uses advanced recycling systems, aquatic water recovery systems, microgravity waste processes, and AI-powered service robots for efficient waste management and sustainability. üåç‚ú®"
    
}

def search_summary(query):
    try:
        wikipedia.set_lang("en")
        summary = wikipedia.summary(query, sentences=2)
        return summary
    except wikipedia.exceptions.DisambiguationError:
        return "There are multiple meanings. Can you be more specific?"
    except wikipedia.exceptions.PageError:
        return "Sorry, I couldn't find information about that."
    except Exception:
        return "Sorry, something went wrong while searching."

def get_response(user_input):
    greetings = {
        "hello": "Hello! How can I help you?",
        "hi": "Hi there! What can I do for you?",
        "how are you": "I'm fine, thank you! How are you?",
        "good morning": "Good morning! Have a nice day!",
        "good night": "Good night! Sweet dreams!",
        "what is your name": "I am your voice assistant.",
        "who are you": "I am an assistant designed to help you.",
        "thank you": "You're welcome!",
        "thanks": "No problem!",
        "bye": "Goodbye! Have a nice day!",
        "goodbye": "Goodbye! See you soon!",
        "what's your name": "I am your voice assistant",
        "hello what's your name": "I am your voice assistant"
    }

    
    for question, answer in hyperglide_knowledge.items():
        if question in user_input:
            return answer

    
    for phrase, reply in greetings.items():
        if phrase in user_input:
            return reply
    

    speak("Let me search for you, please wait...")
    return search_summary(user_input)


while True:
    sentence = listen()
    if sentence:
        response = get_response(sentence)
        speak(response)
        if "bye" in sentence or "goodbye" in sentence:
            break
